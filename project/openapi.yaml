openapi: 3.0.3
info:
  title: Swagger imagestore - OpenAPI 3.0
  description: |-
    This is a sample image Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the image store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of imagestore, then click [here](https://editor.swagger.io/?url=https://imagestore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load imagestore OAS 2.0` menu option!_
    
    Some useful links:
    - [The image Store repository](https://github.com/swagger-api/swagger-imagestore)
    - [The source API definition for the image Store](https://github.com/swagger-api/swagger-imagestore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://imagestore3.swagger.io/api/v3
tags:
  - name: image
    description: Url of image
  - name: album
    description: Access to album users
  - name: user
    description: User storages image & album and shares with athers
paths:
  /image:
    put:
      tags:
        - image
      summary: Update an existing image
      description: Update an existing image by Id
      operationId: updateImage
      requestBody:
        description: Update an existent image in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'   
        '400':
          description: Invalid ID supplied
        '404':
          description: image not found
        '405':
          description: Validation exception
      security:
        - imagestore_auth:
            - write:images
            - read:images
    post:
      tags:
        - image
      summary: Add a new image to the store
      description: Add a new image to the store
      operationId: addimage
      requestBody:
        description: Create a new image in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'     
        '405':
          description: Invalid input
      security:
        - imagestore_auth:
            - write:images
            - read:images
  /image/findByTags:
    get:
      tags:
        - image
      summary: Finds images by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findimageByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Image'   
        '400':
          description: Invalid tag value
      security:
        - imagestore_auth:
            - write:images
            - read:images
    post:
      tags:
        - image
      summary: Add a new image to the store
      description: Add a new image to the store
      operationId: addAlbum
      requestBody:
        description: Create a new album in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'     
        '405':
          description: Invalid input
      security:
        - imagestore_auth:
            - write:images
            - read:images
  /image/{imageId}:
    get:
      tags:
        - image
      summary: Find image by ID
      description: Returns a single image
      operationId: getImageById
      parameters:
        - name: imageId
          in: path
          description: ID of image to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Image'
        '400':
          description: Invalid ID supplied
        '404':
          description: image not found
      security:
        - api_key: []
        - imagestore_auth:
            - write:images
            - read:images
    post:
      tags:
        - image
      summary: Updates an image in the store with form data
      description: ''
      operationId: updateImageWithForm
      parameters:
        - name: imageId
          in: path
          description: ID of image that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Image'
        '405':
          description: Invalid input
      security:
        - imagestore_auth:
            - write:images
            - read:images
            - write:album,
            - read:album,
    delete:
      tags:
        - image
      summary: Deletes a image
      description: delete a image
      operationId: deleteimage
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: imageId
          in: path
          description: image id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid image value
      security:
        - imagestore_auth:
            - write:images
            - read:images
  /album:
    put:
      tags:
        - album
      summary: Update an existing album
      description: Update an existing album by Id
      operationId: updateAlbum
      requestBody:
        description: Update an existent album in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Album'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'   
        '400':
          description: Invalid ID supplied
        '404':
          description: album not found
        '405':
          description: Validation exception
      security:
        - imagestore_auth:
            - write:images
            - read:images
  /album/{albumId}:
    post:
      tags:
        - album
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: albumId
          in: path
          description: ID of album to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - imagestore_auth:
            - write:images
            - read:images
            - write:album
            - read:albu
    delete:
      tags:
        - album
      summary: Deletes a album
      description: delete a album
      operationId: deleteAlbum
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: albumId
          in: path
          description: album id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid image value
      security:
        - imagestore_auth:
            - write:images
            - read:images
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns album inventories by tags
      description: Returns a map of tags codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the storage
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Album:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        albums:
          type: integer
          format: int64
          example: 10
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        complete:
          type: boolean
      xml:
        name: order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Image:
      required:
        - description
        - imageUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        description:
          type: string
          example: spring
        imageUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: imageUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
      xml:
        name: image
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    image:
      description: image object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Image'
        application/xml:
          schema:
            $ref: '#/components/schemas/Image'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    imagestore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://imagestore3.swagger.io/oauth/authorize
          scopes:
            write:images: modify images in your account
            read:images: read your images
    api_key:
      type: apiKey
      name: api_key
      in: header